fn add(a: I8, b: I8) -> (result: I8):
  mut difference := -(a, b)
  return difference

fn squared(x: I8) -> (product: I8):
  product := *(x,x)
  return product

fn value_at_expression(a: Link { I32 }, b: Link { I32 }) -> (result: I32):
  sum : I32 = +(at(a), at(b))
  return sum

fn link_to_expression(a: I32, b: I32) -> (result: I32):
  sum : Link { I32 } = +(Link!!(a), Link!!(b))
  return sum

fn index_value_expression(array: [I32]) -> (result: I32):
  a: [I32] = [10, 40, 60](capacity = 3)
  add := +(a[1], a[2])
  return add