fn addition()->(sum: I32):
    mut current := 0
    mut sum := 0
    while <(current, 1000000000):
        sum = +(sum, current)
        current = +(current, 1)
    return sum

fn indexing() -> (arr: Array { I32 }):
    arr: Array { I32 } ( size = 1000000 ) = [4, 5, 67]
    foreach element at index in arr:
        arr[index] = *(index, index)
    return arr

fn sort() -> (arr: Array {I32}):
    arr := indexing()
    mut i := 1
    mut n := 1000000
    while (i < n):
        mut j := (i - 1)
        key := arr[i]
        while ((j >= 0) and (arr[j] > key)):
            arr[j + 1] = arr[j]
            j = (j - 1)
            pass
        arr[(j + 1)] = key
        i = (i +1)
    return arr

fn selection():
    arr := indexing()
    mut n := 1000000
    mut i := 0
    while <(i,n):
        min_idx := i
        mut j := +(i,1)
        while <(j,n):
            if <(arr[j],arr[min_idx]):
                min_idx = j
            j = +(j,1)
        notEqual := !=(min_idx, i)
        if notEqual is TRUE:
            temp := arr[i]
            arr[i] = arr[min_idx]
            arr[min_idx] = temp
        i = +(i,1)

fn bubble():
    arr := indexing()
    mut n := 1000000
    mut i := 0
    while <(i,n):
        mut j := 0
        while <(j, -(n,i)):
            if >(arr[j],arr[+(j,1)]):
                temp := arr[j]
                arr[j] = arr[+(j,1)]
                arr[+(j,1)] = temp
            j = +(j,1)
        i = +(i,1)

object Person:
    name: String
    age: I32

fn complex_idx() -> (arr: Array { Person }):
    arr: Array { Person } ( size = 1000000 ) = []
    foreach element at index in arr:
        arr[index] = Person(name="John", age=20)
    return arr

fn main():
    sort()